# ——————题目描述——————：
# 输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。
# （注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）


# ——————解题思路——————：
# 三步骤：（1）生成新的结点，复制原结点的值、next结点，并将新节点放在旧结点后一位；
#        （2）遍历旧结点，复制 random 结点；
#        （3）将两个链表拆分出来，新旧链表断开。

# 注意：为什么要这么做？
# 链表结点进行复制的时候，不能简单地写作 pCloned = pNode，这样的话之后对pCloned的操作也会作用在pNode上面，导致操作循环往复。



# -*- coding:utf-8 -*-
# class RandomListNode:
#     def __init__(self, x):
#         self.label = x
#         self.next = None
#         self.random = None
class Solution:
    # 返回 RandomListNode
    def Clone(self, pHead):
        # write code here
        if not pHead:
            return
        
        # 复制旧链表中的每个结点的值，并将其放在该链表之后
        cur = pHead
        while cur:
            new_cur = RandomListNode(cur.label)
            new_cur.next = cur.next
            cur.next = new_cur
            cur = new_cur.next
        
        
        # 遍历旧链表，复制其中的Random 结点
        cur = pHead
        while cur:
            cur.next.random = cur.random
            cur = cur.next.next 
        
        # 将两个链表拆分出来,将新旧两个链表断开
        cur = pHead
        new_Head = pHead.next
        
        while cur:
            new_cur = cur.next
            cur.next = cur.next.next
            new_cur.next = new_cur.next.next if cur.next else None
            cur = cur.next

        return new_Head
