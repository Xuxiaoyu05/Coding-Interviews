# ——————题目描述——————：
# LL今天心情特别好, 因为他去买了一副扑克牌, 发现里面居然有2个大王, 2个小王(一副牌原本是54张^_^)...他随机从中抽出了5张牌, 想测测自己的手气,
# 看看能不能抽到顺子, 如果抽到的话, 他决定去买体育彩票, 嘿嘿！！“红心A,黑桃3,小王,大王,方片5”, “Oh My God!”不是顺子.....LL不高兴了, 他想了想,
# 决定 大\小 王可以看成任何数字, 并且A看作1, J为11, Q为12, K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4), “So Lucky!”。
# LL决定去买体育彩票啦。 现在, 要求你使用这幅牌模拟上面的过程, 然后告诉我们LL的运气如何，如果牌能组成顺子就输出true，否则就输出false。
# 为了方便起见, 你可以认为大小王是0。


# ——————解题思路——————：
# 排序——统计0的个数——统计中间差的牌数——如果差的牌数大于0的个数，返回False，否则返回True
# 一定要注意：有对子直接返回False

# -*- coding:utf-8 -*-
class Solution:
    def IsContinuous(self, numbers):
        # write code here
        # 排序，统计 0 的个数，与 排序数字之前的差值做比较，判断是否能组成顺子
        if not numbers:
            return False
        
        # 排序
        numbers = self.QuickSort(numbers, 0, len(numbers)-1)
        
        count = 0
        diff = 0
        
        for i in range(len(numbers)-1):
            if numbers[i] == 0:
                count += 1
            else:
                if numbers[i+1] == numbers[i]:  # 此步不能忘，如果有对子，直接返回 False
                    return False
                diff += numbers[i+1] - numbers[i] - 1
        
        if count >= diff:
            return True
        else:
            return False
            
    def Partition(self, array, left, right):
        pivot = array[left]
        i = left
        
        for j in range(left+1, right+1):
            if array[j] < pivot:
                i += 1
                array[i], array[j] = array[j], array[i]
        
        array[left], array[i] = array[i], array[left]
        
        return i
    
    def QuickSort(self, array, left, right):
        if left < right:
            q = self.Partition(array, left, right)
            self.QuickSort(array, left, q-1)
            self.QuickSort(array, q+1, right)
            
        return array
