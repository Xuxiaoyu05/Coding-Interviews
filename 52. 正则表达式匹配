# ——————题目描述——————：
# 请实现一个函数用来匹配包括'.'和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（包含0次）。 
# 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但是与"aa.a"和"ab*a"均不匹配


# ——————解题思路——————：
# 总体上可分为两种情况：
#（1）模式中第二个字符不是 "*" 
#    如果字符串中的第一个字符和模式中的第一个字符相匹配，那么在字符串和模式上都向后移动一个字符，然后匹配剩余的字符串和模式。
#    如果字符串中的第一个字符和模式中的第一个字符不相匹配，则直接返回 False。

#（2）模式中第二个字符是 "*"：需要分为三种情况："*" 前面的字符匹配多次（贪婪匹配），匹配一次，匹配 0 次，分别对字符串和模式进行相应后移。
#     当模式中的第二个字符是 "*" 时，问题要复杂一些，因为可能有多种不同的匹配方式。
#     一种选择是在模式上向后移动两个字符，这相等于 ”*“ 和 它前面的字符被忽略了，因为 "*" 可以匹配字符串中的 0 个字符。
#     如果模式中的第一个字符和字符串中的第一个字符相匹配，则字符串向后移动一个字符，在模式上有两种选择：可以在模式上向后移动两个字符，也可以保持模式不变

#（3）特殊输入测试：空字符串、空模式、含 "." 模式、含 "*" 模式、普通模式


# -*- coding:utf-8 -*-
class Solution:
    # s, pattern都是字符串
    def match(self, s, pattern):
        # write code here
        if not pattern:
            # 都空则返回 True
            if not s:
                return True
            else:
                return False
        
        # 若模式第一位为 *，直接返回 False
        if pattern[0] == "*":
            return False
        
        
        if len(pattern) > 1 and pattern[1] == "*":  # 如模式的第二位为 *
            if (len(s) > 0 and (s[0] == pattern[0] or pattern[0] == ".")):
                return self.match(s[1:], pattern) or self.match(s, pattern[2:])
            else:
                return self.match(s, pattern[2:])
        # 若模式的第二位不是 *
        elif (len(s) > 0 and (s[0] == pattern[0] or pattern[0] == ".")):
            return self.match(s[1:], pattern[1:])
        else:
            return False
