# ——————题目描述——————：
# 数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。
# 例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。


# ——————解题思路——————：
# 若数组中存在一个元素出现次数超过一半，则它出现的次数比其他数字出现的总和还要多，因此可以最开始保存两个数值：数组中的一个数字以及它出现的次数。
# 第一次遍历，找出这个可能出现一半的数字：即如果下一个数字等于这个数字，那么次数加一，如果不等，次数减一，当次数小于等于0的时候，设置新数，出现次数设为1。
# 再一次遍历再验证最后留下的数字是否出现次数超过一半，因为可能前面的次数依次抵消掉，最后一个数字就直接是保留下来的数字，但是出现次数不一定超过一半。



# -*- coding:utf-8 -*-
class Solution:
    def MoreThanHalfNum_Solution(self, numbers):
        # write code here
        
        if not numbers:
            return
        
        # 遍历一次数组，找出可能出现的次数超过数组长度的一半的数字
        temp = numbers[0]
        count = 0
        for number in numbers:
            if number == temp:
                count += 1
            else:
                count -= 1
                
                if count <= 0:
                    temp = number
                    count = 1
        
        # 再遍历一遍，判断其出现次数是否超过一半
        appear = 0
        for num in numbers:
            if num == temp:
                appear += 1
        
        if appear > len(numbers) // 2:
            return temp
        else:
            return 0
