# ——————题目描述——————：
# 给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。
# 例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}；
# 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， 
#                                              {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。


# ——————解题思路——————：
# 方法1：若用遍历 + 每次在滑动窗口中找最大值的时间复杂度为 O(n * size)
# 改进方法：用双端队列，时间复杂度 O(n)
#          双端队列中存储的是下标值，其中队首存的是队列中最大的值的下标；
#          比较队列中元素和当前遍历值的大小，把小于当前值的元素出队，将当前值入队。
#          需要注意的是：当队首值已在滑动窗口外时，需将其出队。




# -*- coding:utf-8 -*-
class Solution:
    def maxInWindows(self, num, size):
        # write code here
        # 若用遍历 + 每次在滑动窗口中找最大值的时间复杂度为 O(n * size)
        # 改进方法：用双端队列，时间复杂度 O(n)
        
        if len(num) == 0:
            return []
        
        if size <= 0 or size > len(num):
            return []
        
        # 双端队列，里面存的是下标，队列首存的是队列中最大的值的下标
        deque = []
        res = []
        for i in range(len(num)):
            # 若一个数字的下标与当前处理的数字的下标之差大于等于滑动窗口的大小时
            # 这个数字已经从窗口中划出，可以从队列中删除了
            while len(deque) > 0 and i - size + 1 > deque[0]:
                deque.pop(0)
            
            # 当 deque 中尾部对应的值小于新遍历的值，则将小的值出栈
            while len(deque) > 0 and num[deque[-1]] <= num[i]:
                deque.pop()
            
            deque.append(i)
            
            if i >= size - 1:
                res.append(num[deque[0]])  # 将队首的值存入到结果中
        
        return res
