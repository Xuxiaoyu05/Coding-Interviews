# ——————题目描述——————：
# 输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。
# 路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)


# ——————解题思路——————：
# 递归解法：若当前根节点为空或者大于期望值，终止往下；若当前根节点等于期望值，若其左右子树为空，则返回只有当前节点的二维列表，若不为叶子结点，终止往下；
#          若当前根节点小于期望值，则递归往下，最终把递归结果合并起来并排序。
# 注意：递归中若左右子树为空，返回只有当前结点的二维列表


# -*- coding:utf-8 -*-
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution:
    # 返回二维列表，内部每个列表表示找到的路径
    def FindPath(self, root, expectNumber):
        # write code here
        # 递归
        
        if not root or root.val > expectNumber:
            return []
        
        res = []
        
        if root.val == expectNumber:
            if root.left == root.right == None:
                return [[root.val]]   # 一定注意：此处用两个[[]]，返回二维列表
            else:
                return []
        
        expectNumber -= root.val
        
        left = self.FindPath(root.left, expectNumber)
        right = self.FindPath(root.right, expectNumber)
        
        for path in left + right:  # 将左右路径拼接起来
            res.append([root.val] + path)
        
        return sorted(res, key = lambda x: len(x), reverse = True)
