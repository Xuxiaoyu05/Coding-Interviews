# ——————题目描述——————：
# 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。
# 例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。
# （注意：这两个序列的长度是相等的）


# ——————解题思路——————：
# 建立一个辅助栈，遍历压栈序列，依次将元素压入辅助栈中，如果压入的元素与出栈序列首位元素相同，
# 则辅助栈（删除栈尾元素）和弹出栈（删除首位元素）连续出栈，直到不同为止。入栈完毕后，如果出栈序列为空，则为 True，否则为 False。


# -*- coding:utf-8 -*-
class Solution:
    def IsPopOrder(self, pushV, popV):
        # write code here
        assist_stack = []   # 辅助栈
        
        for i in pushV:
            assist_stack.append(i)
            while popV:
                if assist_stack[-1] == popV[0]:
                    popV.pop(0)
                    assist_stack.pop()
                else:
                    break
                    
        # 若 popV 非空
        if popV:
            return False
        
        return True
