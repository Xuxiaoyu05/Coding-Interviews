# ——————题目描述——————：
# 请实现两个函数，分别用来序列化和反序列化二叉树


# ——————解题思路——————：
# 二叉树的序列化：采用前序遍历二叉树输出节点，碰到左子节点或者右子节点为None的时候输出一个特殊字符”#”。
# 反序列化：就是针对输入的一个序列构建一棵二叉树，设置一个指针先指向序列的最开始，然后把指针指向位置的数字转化为二叉树的结点，
#          后移一个数字，继续转化为左子树和右子树。当遇到当前指向的字符为特殊字符”#”或者指针超出了序列的长度，则返回None，指针后移，继续遍历。


# -*- coding:utf-8 -*-
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution:
    flag = -1  # 标识递归的位置
    def Serialize(self, root):
        # write code here
        # 序列化二叉树就是前序遍历，不存在的元素存为 "#"
        if not root:
            return "#"
        
        stack = []
        cur = root
        serializeStr = ""
        
        while cur or stack:
            while cur:
                serializeStr += str(cur.val) + ","
                stack.append(cur)
                cur = cur.left
                
            serializeStr += "#,"
            cur = stack.pop()
            cur = cur.right
        
        return serializeStr[:-1]

    def Deserialize(self, s):
        # write code here
        self.flag += 1
        
        serialize = s.split(",")
        
        if self.flag >= len(serialize):
            return None
        
        root = None
        
        if serialize[self.flag] != "#":
            root = TreeNode(int(serialize[self.flag]))
            root.left = self.Deserialize(s)
            root.right = self.Deserialize(s)
        
        return root
