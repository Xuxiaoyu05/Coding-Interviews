# ——————题目描述——————：
# 统计一个数字在排序数组中出现的次数。

# ——————解题思路——————：
# 在排序数组中进行查找，联想到用二分查找
# 使用二分法分别查找数组中k首次出现和最后一次出现的位置。时间复杂度为 O(logn)


# -*- coding:utf-8 -*-
class Solution:
    def GetNumberOfK(self, data, k):
        # write code here
        # 排序数组想到用二分查找
        if not data:
            return 0


        count = 0
        left = 0
        right = len(data) - 1
       
        start = self.LowerBound(data, left, right, k)
        end = self.UpperBound( data, left, right, k)
        
        # 别忘了 + 1
        if start == -1:
            return 0
        else:
            count = end - start + 1
        
        return count
    
    def LowerBound(self, data, left, right, k):
        while left <= right:
            mid = (left + right)//2
            if k > data[mid]:
                left = mid + 1
            elif k < data[mid]:
                right = mid - 1
            else:
                if mid > 0 and data[mid-1] == k:  # 注意此处的写法
                    right = mid - 1
                else:
                    return mid
        
        return -1
    
    def UpperBound(self, data, left, right, k):
        while left <= right:
            mid = (left + right) // 2
            if k > data[mid]:
                left = mid + 1
            elif k < data[mid]:
                right = mid - 1
            else:
                if mid < right and data[mid + 1] == k: 
                    left = mid + 1
                else:
                    return mid

        return -1
