# ——————题目描述——————：
# HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和, 当向量全为正数
# 的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？
# 例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。
# 给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)


# ——————解题思路——————：
# 贪心求解。
# 如果 F(n-1) > 0，F(n) = F(n-1) + A[n]，否则 F(n) = A[n]


# -*- coding:utf-8 -*-
class Solution:
    def FindGreatestSumOfSubArray(self, array):
        # write code here
        if not array:
            return 0
        
        temp = array[0]  # 注意，temp 和 max_sum 的初始值都为 array[0]，而不是 0，因为 array 中可能都是负数
        max_sum = array[0]
        
        for i in range(1, len(array)):
            temp += array[i]
            max_sum = max(max_sum, temp)
            temp = max(0, temp)
        
        return max_sum
