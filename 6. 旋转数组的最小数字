# ——————题目描述——————：
# 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 
# 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。

# ——————解题思路——————：
# 二分查找：假设旋转后的数组分为两个不减的数组 front 和 second，若未发生旋转，最小元素为 A[0]，若发生旋转，最小元素为 second 中的第一个元素。
# 设置两个指针 left 和 right，其中 left 始终指向 first 数组，right 始终指向 second 数组。循环条件为 left < right 且 A[left] >= A[right]，
# 其中 left < right 是确保 left 始终指向 front，right 始终指向 second。 中间指针 mid = (left + right) // 2，
# 若 A[mid] 大于 A[left]，说明 mid 一定在 front 中, left = mid + 1；若 A[mid] < A[right]，说明 mid 一定在 second 中, right = mid；
# 当特殊情况：A[mid] = A[left] or A[right] 时，由于原数组为单调不减数组，无法确定 mid 是在哪个数组中，此时 left += 1
# 时间复杂度为 O(logn)

# -*- coding:utf-8 -*-
class Solution:
    def minNumberInRotateArray(self, rotateArray):
        # write code here
        if not rotateArray:
            return 0
        
        left = 0
        right = len(rotateArray) - 1
        
        # 若 rotateArray[left] < rotateArray[right]，可直接返回 rotateArray [left]
        while left < right and rotateArray[left] >= rotateArray[right]:
            mid = (left + right)//2
            if rotateArray[mid] > rotateArray[left]:
                left = mid + 1
            elif rotateArray[mid] < rotateArray[right]:
                right = mid   # 注意：right = mid，因为 right 要一直指向 second 数组
            else:
                left += 1
        
        return rotateArray[left]
