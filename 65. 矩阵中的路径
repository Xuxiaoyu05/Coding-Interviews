# ——————题目描述——————：
# 请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。
# 路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。
# 如果一条路径经过了矩阵中的某一个格子，则之后不能再次进入这个格子。 
# 例如 a b c e s f c s a d e e 这样的3 X 4 矩阵中包含一条字符串"bcced"的路径，但是矩阵中不包含"abcb"路径，
# 因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。


# ——————解题思路——————：
# 回溯法：生成一个布尔矩阵，用来存放该位置是否已经被遍历过。
# 用深搜（四个方向）来判断路径是否可被递归完，并把该位置的布尔矩阵值改为True，如果路径被递归完，则说明可以找到通路，否则返回False。


# -*- coding:utf-8 -*-
class Solution:
    def hasPath(self, matrix, rows, cols, path):
        # write code here
        
        # 回溯法
        if not path:
            return True
        
        if not matrix or rows <= 0 or cols <= 0:
            return False
        
        V = [False] * cols * rows
        
        for row in range(rows):
            for col in range(cols):
                if self.DFS(matrix, rows, cols, row, col, path, V):
                    return True
                
        return False
                
        
    def DFS(self, matrix, rows, cols, row, col, path, V):
        # 注意：要先判断 path 是否已经为空
        # 若先判断 V[row*cols + col]是否为 True，则当所有元素都便利到后会返回 False
        if not path:  
            return True
        
        if row >= rows or col >= cols or V[row*cols + col] == True:
            return False

        if matrix[row*cols + col] == path[0]:
            V[row*cols + col] = True
            
            flag = False
            
            # 向下检索
            if row < rows:
                flag = flag or self.DFS(matrix, rows, cols, row+1, col, path[1:], V)
            
            # 向右检索
            if col < cols:
                flag = flag or self.DFS(matrix, rows, cols, row, col+1, path[1:], V)
            
            # 向上检索
            if row > 0:
                flag = flag or self.DFS(matrix, rows, cols, row-1, col, path[1:], V)
            
            # 向左检索
            if col > 0:
                flag = flag or self.DFS(matrix, rows, cols, row, col-1, path[1:], V)
            
            if flag:
                return True
            else:
                V[row*cols + col] = False
                
        return False
