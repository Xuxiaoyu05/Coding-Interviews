# ——————题目描述——————：
# 写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。

# ——————解题思路——————：
# 位运算
#（1）先将两个数直接按位相加不进位，即异或运算
#（2）求出两个数需要进位的位置，二进制中即为按位与操作，之后左移一位；
#（3）& 0xffffffff 为了得到负数的二进制表示
# 注意：需要判断结果的正负





# -*- coding:utf-8 -*-
class Solution:
    def Add(self, num1, num2):
        # write code here
        # 将两个数直接按位相加不进位，二进制中即为异或运算；
        # 求出两个数需要进位的位置，二进制中即为按位与操作，之后左移一位；
        # 将前面两部分结果作为初始的两个整数进行循环，直到不需要进位为止；
        # 注意：Python 没有位数这个概念，需要判断结果的正负
         
        while num2 != 0:
            # 0xffffffff 是 32位数都是1的二进制数
            temp = num1 ^ num2
            num2 = ((num1 & num2) << 1) & 0xffffffff
            num1 = temp & 0xffffffff
        
        # 0x7fffffff 为 int 的最大值
        if num1 <= 0x7fffffff:
            return num1
        return ~(num1 ^ 0xffffffff)   # 此处 num1 & 0xffffffff 直接 return 的是结果的二进制表示，加上 ~ 才是得到的数字
