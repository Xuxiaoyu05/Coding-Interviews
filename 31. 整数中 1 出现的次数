# ——————题目描述——————：
# 求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？
# 为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。
# ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。


# ——————解题思路——————：
# 统计规律法：对于一个整数，逐位分析它上面出现1的次数（不同位互不影响， 如 11 会出现 2 次，个位一次，十位一次，包括 2 个 1），然后加起来。
# 1~13 中 1 出现的次数 = 个位数出现 1 的次数（1, 11） + 十位数出现 1 的次数（10，11，12，13） = 6
# 以百位为例：
#（1）如果百位数字为 0，如 12024，则百位上为 1 的数字有：100~199, 1100~1199, 2100 ~ 2199, ..., 9100~9199, 10100~10199, 11100~11199, 
#     共有 1200 = 12 * 100 个，可见其等于 高位数字 * 当前位数。
#（2）如果百位数字是 1，如 12124，则百位数上为 1 的数字有 100~199, 1100~1199, 2100 ~ 2199, ..., 9100~9199, 10100~10199, 11100~11199，12100~12124,
#     共有 1225 = 12 * 100 + 24 + 1 个，可见其等于 高位数字 * 当前位数 + 低位数字 + 1
#（3）如果百位数字大于 1，如 12224，则百位数上为 1 的数字有 100~199, 1100~1199, 2100 ~ 2199, ..., 9100~9199, 10100~10199, 11100~11199，12100~12199，
#     共有 1300 = （12+1）* 100 个，可见其等于 （高位数字 + 1） * 当前位数。


# -*- coding:utf-8 -*-
class Solution:
    def NumberOf1Between1AndN_Solution(self, n):
        # write code here
        if n <= 0:
            return 0
        
        count = 0
        
        factor = 1
        
        while n // factor:  # 循环条件为 n // factor
            lower = n % factor
            cur = (n // factor) % 10    # 注意：如何求当前位的数字
            higher = n // (factor * 10)
            
            if cur == 0:
                count += higher * factor
            elif cur == 1:
                count += higher * factor + lower + 1
            else:
                count += (higher+1) * factor
            
            factor = factor * 10
        
        return count
