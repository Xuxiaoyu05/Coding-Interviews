# ——————题目描述——————：
# 输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）


# ——————解题思路——————：
# 递归思想：如果根结点值相同，就递归调用 isSubTree 函数，否则判断 B 是否为 A 的左子树或右子树的子结构。
# 注意：在 isSubTree 中，要先判断 B 是否为空，为空则表示已经遍历完了，是子结构。若 B 不为空，而 A 为空 或 当前两个根结点值不同则返回 False，
#       否则递归到左右子树继续判断，两个子树都返回 True 则返回 True。


# -*- coding:utf-8 -*-
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution:
    def HasSubtree(self, pRoot1, pRoot2):
        # write code here
        if pRoot1 == None or pRoot2 == None:
            return False
        
        return self.isSubTree(pRoot1, pRoot2) or self.HasSubtree(pRoot1.left, pRoot2) or self.HasSubtree(pRoot1.right, pRoot2)
    
    def isSubTree(self, root1, root2):
        # 注意判断这两个为空的条件
        if root2 == None:  # 当 root2 为空时，无论 root1 是否为空，都返回 True
            return True
        
        if root1 == None:  # 当 root2 不为空，但 root1 为空，返回 False
            return False
        
        if root1.val == root2.val:
            return self.isSubTree(root1.left, root2.left) and self.isSubTree(root1.right, root2.right)
        else:
            return False
